Para iniciar a configuração das dependências pro composer, rode:
    composer init

Package name: nome do distribuidor seguido do nome do pacote em si.
    Package name (<vendor>/<name>) [thiago/buscador-cursos-alura]: 
            thiagomarcal1984/buscador-cursos

Description: descrição resumida do pacote.
    Description []: 
            Projeto que busca os cursos no site da Alura.

Author: nome do autor do pacote (geralmente é obtido do repositório git)
    Author [Thiago Marçal <thiagomarcal1984@gmail.com>, n to skip]: 
            <Enter>

Minimum Stability []: informa qual a estabilidade aceitável das dependências 
    que serão baixadas.
    
    Minimum Stability []:
            <Enter>

Package Type: especifica um dos seguintes tipos de pacote:
        * library: biblioteca que vai ser reusada (é o default);
        * project: projeto completo, auto-executável;
        * metapackage: projeto vazio, esqueleto para outros projetos.
        * composer-plugin: plugins próprios pro composer (tipo Maven, eu acho).

    Package Type (e.g. library, project, metapackage, composer-plugin) []: 
            library

License: define o tipo de licença do pacote (Apache, MIT etc)
    License []: 
            <Enter>

Definir as dependências: se você souber as dependências, você pode informá-las,
    conforme padrão do nome do pacote (vendor/package). Não vamos informar.
 
    Would you like to define your dependencies (require) interactively [yes]? 
            n

Definir dependências de desenvolvedor: idem item anterior, mas focado nas 
    ferramentas de desenvolvimento (ferramentas de teste etc.).

    Would you like to define your dependencies (require) interactively [yes]? 
            n

Autoload mapping: não explicado no curso. Mas mapeia namespaces a pastas.
    Add PSR-4 autoload mapping? Maps namespace "Thiagomarcal1984\BuscadorCursos"
    to the entered relative path. [src/, n to skip]:
            n


Em seguida é gerado o JSON do composer. Solicita-se confirmação do arquivo.
    Do you confirm generation [yes]? 
            <Enter>


Curiosidade: o composer.json pode ser vazio, contendo apenas as chaves{}!

---------------------------------------------------------------------
Você pode consultar os packages disponíveis para Composer no site Packagist:
https://packagist.org/

Assim como no Maven,  o Packagist não é o único repositório de packages que
existe para Composer.

---------------------------------------------------------------------

Para instalar uma dependência (inseri-la no JSON), use o seguinte comando:
    composer require <vendor/package>

3 alterações são feitas:
    1) A pasta vendor é criada/atualizada e nela são guardadas as dependências;
    2) O arquivo composer.json é modificado (recebe a dependência);
    3) É criado um arquivo composer.lock, que contém as referências a todas as 
       dependências instaladas (não só as que estão em composer.json).

Obs.: arquivo JSON NÃO permitem comentários, como no JavaScript.

Se você for editar o composer.json diretamente, você precisa atualizar o 
arquivo composer.lock através do comando:
    composer update

    Descrição:  Updates your dependencies to the latest version according to
                composer.json, and updates the composer.lock file.        
    Help:
    The update command reads the composer.json file from the
    current directory, processes it, and updates, removes or installs all the
    dependencies.

Depois que o composer.lock for atualizado, você pode baixar as dependências
a partir do composer.lock usando o comando:
    composer install

    Descrição:  Installs the project dependencies from the composer.lock file 
                if present, or falls back on the composer.json.

    Help:
    The install command reads the composer.lock file from
    the current directory, processes it, and downloads and installs all the
    libraries and dependencies outlined in that file. If the file does not
    exist it will look for composer.json and do the same.

---------------------------------------------------------------------
O caret (^) antes do número da versão da dependência significa que o Composer
pode colocar composer.lock versões superiores às mencionadas no composer.json.

---------------------------------------------------------------------
PHP Standards Recommendation (PSR) são recomendações criadas pelo PHP-FIG
(PHP Framework Interop Group). A PSR-4 fala sobre autoloaders em PHP:
https://www.php-fig.org/psr/psr-4/

Basicamente a PSR pede que o namespace siga o padrão Vendor\Caminho\Para\Classe.
A parte do Vendor no namespace pode corresponder a qualquer diretório.
Cada parte depois do Vendor (exceto a última) deve corresponder a um diretório.
A última parte do namespace deve corresponder à classe e ao nome do arquivo PHP.

Para que os arquivos criados pelo desenvolvedor sejam importados, modifique o 
composer.json incluindo o seguinte código:

    "autoload": {
        "psr-4": {
            "Caminho\\Do\\Vendor\\" : "diretorio_raiz/"
        }
    }

O Composer só vai conhecer as configurações de PSR-4 novas depois que o
seguinte comando for executado:
    composer dumpautoload

O Composer também pode associar uma classe a um caminho específico. Para isso,
inclua o seguinte codigo no composer.json e execute o composer dumpautoload:
    "autoload": {
        "classmap": [
            "./Teste.php"
        ],
        "psr-4": {
            ... código anterior do PSR-4
        }
    }

Ao executar o comando, o arquivo vendor/composer/autoload_classmap.php é
atualizado.

Se o arquivo listado dentro do classmap tiver mais de uma classe, todas as 
classes serão carregadas no autoload_classmap.php.

É possível também definir quais arquivos serão sempre carregados pelo Composer.
Para isso, insira o grupo files em composer.json e repita o dumpautoload:


Em resumo, o grupo autoload no composer.json tem 3 listas:
    1) psr-4: mostra quais arquivos são carregados a partir de namespaces;
    2) classmap: mostra os arquivos a partir dos quais classes são carregadas;
    3) files: mostra quais arquivos tem funções que podem ser reusadas.

    PSR-4 é o caminho mais natural de importar classes a partir de namespaces.
    Classmap e Files facilitam a importação de classes e funções e são úteis
    para importar código de projetos legados. Em files as classes são carregadas
    mesmo que não sejam usadas, já em classmap o carregamento é sob demanda.


Se colocarmos o parâmetro dev no comando require, a dependência será instalada
para uso apenas no ambiente de desenvolvimento. Código pra instalar o PHPUnit:

    composer require --dev phpunit/phpunit

Quando você for instalar as dependências em produção, use o parâmetro no-dev:
    composer install --no-dev

As dependências do composer guarda seus executáveis na pasta vendors\bin. Por 
exemplo, para mostrar a versão do PHPUnit instalada pelo Composer:
    vendor\bin\phpunit --version
